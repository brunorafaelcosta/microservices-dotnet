version: '3.4'

services:
  # API
  api.identity:
    image: ${REGISTRY:-microservices-dotnet}/api.identity:${PLATFORM:-linux}-${TAG:-latest}
    env_file:
      - src/Services/Identity/Services.Identity.API/Development.env
    build:
      context: src/Services
      dockerfile: Identity/Services.Identity.API/Development.Dockerfile
    ports:
      - '${MICROSERVICESDOTNET_API_IDENTITY_PORT}:8080'
    expose:
      - '${MICROSERVICESDOTNET_API_IDENTITY_PORT}'
    volumes:
      - ~/vsdbg:/vsdbg:ro
      - ./src/Services:/workspace
      # - ${HOME}/.nuget/packages:/root/.nuget/packages:ro
      # - ${DOTNET_PATH}/sdk/NuGetFallbackFolder:/root/.nuget/fallbackpackages:ro
    depends_on:
      - db

  # Web
  ## Authentication
  web.authentication:
    image: ${REGISTRY:-microservices-dotnet}/web.authentication:${PLATFORM:-linux}-${TAG:-latest}
    env_file:
      - src/Web/WebAuthentication/Development.env
    build:
      context: src/Web
      dockerfile: WebAuthentication/Development.Dockerfile
    ports:
      - '${MICROSERVICESDOTNET_WEB_AUTHENTICATION_PORT}:8080'
    expose:
      - '${MICROSERVICESDOTNET_WEB_AUTHENTICATION_PORT}'
    volumes:
      - ~/vsdbg:/vsdbg:ro
      - ./src/Web:/workspace
      # - ${HOME}/.nuget/packages:/root/.nuget/packages:ro
      # - ${DOTNET_PATH}/sdk/NuGetFallbackFolder:/root/.nuget/fallbackpackages:ro
    depends_on:
      - api.identity
  
  ## Administration
  web.administration:
    image: ${REGISTRY:-microservices-dotnet}/web.administration:${PLATFORM:-linux}-${TAG:-latest}
    env_file:
      - src/Web/WebAdministration/web-admin/Development.env
    build:
      context: src/Web
      dockerfile: WebAdministration/web-admin/Development.Dockerfile
    ports:
      - '${MICROSERVICESDOTNET_WEB_ADMINISTRATION_PORT}:3000'
    expose:
      - '${MICROSERVICESDOTNET_WEB_ADMINISTRATION_PORT}'
    volumes:
      - ~/vsdbg:/vsdbg:ro
      - ./src/Web:/workspace
      - /workspace/WebAdministration/web-admin/node_modules
    depends_on:
      - web.authentication
  
  # Databases
  db:
    image: mysql:8
    restart: always
    environment:
      MYSQL_USER: ${MICROSERVICESDOTNET_DB_USER}
      MYSQL_PASSWORD: ${MICROSERVICESDOTNET_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MICROSERVICESDOTNET_DB_ROOT_PASSWORD}
    ports:
      - '${MICROSERVICESDOTNET_DB_PORT}:3306'
    expose:
      - '${MICROSERVICESDOTNET_DB_PORT}'
    volumes:
      - db:/var/lib/mysql
  
  # Message Broker
  messagebroker:
    image: rabbitmq:3-management
    ports:
      - '${MICROSERVICESDOTNET_MESSAGEBROKER_MGMT_PLUGIN_PORT}:15672'
      - '${MICROSERVICESDOTNET_MESSAGEBROKER_QUEUE_PORT}:5672'
    expose:
      - '${MICROSERVICESDOTNET_MESSAGEBROKER_MGMT_PLUGIN_PORT}'
      - '${MICROSERVICESDOTNET_MESSAGEBROKER_QUEUE_PORT}'
  
  # Logging
  ## E
  elasticsearch:
    build:
      context: infrastructure/logging
      dockerfile: elasticsearch/Development.Dockerfile
    ports:
      - '${MICROSERVICESDOTNET_ELASTICSEARCH_PORT}:9200'
      - '${MICROSERVICESDOTNET_ELASTICSEARCH_NODES_PORT}:9300'
    # expose:
    #   - '${MICROSERVICESDOTNET_ELASTICSEARCH_PORT}'
    #   - '${MICROSERVICESDOTNET_ELASTICSEARCH_NODES_PORT}'
    environment:
      ES_JAVA_OPTS: '-Xmx256m -Xms256m'
    volumes:
      - ./infrastructure/logging/elasticsearch/config.Development.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - logging
  ## L
  logstash:
    build:
      context: infrastructure/logging
      dockerfile: logstash/Development.Dockerfile
    ports:
      - '${MICROSERVICESDOTNET_LOGSTASH_TCP_PORT}:${MICROSERVICESDOTNET_LOGSTASH_TCP_PORT}'
      - '${MICROSERVICESDOTNET_LOGSTASH_HTTP_PORT}:${MICROSERVICESDOTNET_LOGSTASH_HTTP_PORT}'
    environment:
      LOGSTASH_TCP_PORT: ${MICROSERVICESDOTNET_LOGSTASH_TCP_PORT}
      LOGSTASH_HTTP_PORT: ${MICROSERVICESDOTNET_LOGSTASH_HTTP_PORT}
      ELASTICSEARCH_URL: 'elasticsearch:${MICROSERVICESDOTNET_ELASTICSEARCH_PORT}'
      LS_JAVA_OPTS: '-Xmx256m -Xms256m'
    volumes:
      - ./infrastructure/logging/logstash/config.Development.yml:/usr/share/logstash/config/logstash.yml
      - ./infrastructure/logging/logstash/pipeline.Development.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - logging
    depends_on:
      - elasticsearch
  ## K
  kibana:
    build:
      context: infrastructure/logging
      dockerfile: kibana/Development.Dockerfile
    ports:
      - '${MICROSERVICESDOTNET_KIBANA_PORT}:5601'
    # expose:
    #   - '${MICROSERVICESDOTNET_KIBANA_PORT}'
    environment:
      ELASTICSEARCH_URL: 'http://elasticsearch:${MICROSERVICESDOTNET_ELASTICSEARCH_PORT}'
    volumes:
      - ./infrastructure/logging/kibana/config.Development.yml://usr/share/kibana/config/kibana.yml
    networks:
      - logging
    depends_on:
      - elasticsearch

volumes:
  db:
    labels:
      com.microservices-dotnet.description: 'MySQL data volume'
  elasticsearch-data:
    labels:
      com.microservices-dotnet.description: 'Elasticsearch data volume'

networks:
  default:
    driver: bridge
  logging:
    driver: bridge
